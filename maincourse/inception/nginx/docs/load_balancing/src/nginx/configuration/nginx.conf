# nginx.conf

events { # events block: Deals with connection processing settings.
    worker_connections 1024; # This sets the maximum number of simultaneous connections each worker process can handle.
}
# In the context of NGINX, a "worker" refers to a worker process.
# NGINX uses a master-worker process model for handling client requests.
# Master Process:
# - Reads and evaluates configuration files.
# - Maintains worker processes.
# - Does not serve client requests.
# Worker Process:
# - Handles client requests.
# - Reads and writes to disk.
# - Communicates with other processes.
# - Can be configured to run as a specific user.

# Why Use Worker Processes?
# - Worker processes allow NGINX to handle multiple client requests simultaneously.
# - This improves performance and scalability.
# - Worker processes can be configured to run as a specific user, which enhances security.


http { # http block: Defines how NGINX should handle HTTP traffic.
    upstream backend { # This defines a group of backend servers named "backend."
        server backend1:3000; # This adds a server named "backend1" to the "backend" group.
        server backend2:3000; # This adds a server named "backend2" to the "backend" group.
        server backend3:3000; # This adds a server named "backend3" to the "backend" group.
        # NGINX will load balance requests across these servers.
    }

    server {
        listen 80; # This tells NGINX to listen on port 80 for incoming HTTP traffic.

        location / { # This is a location block that matches all incoming requests (the "/" means the root path).
        # The root path is the directory on your server's file system where the website's files (HTML, CSS, JavaScript, images, etc.) are stored.
            proxy_pass http://backend; # This tells NGINX to pass requests to the "backend" group of servers.
            # This is the key line! It tells NGINX to pass all incoming requests to the "backend" upstream group we defined earlier. NGINX will distribute these requests to the backend servers for processing.
            proxy_set_header Host $host;
            # This sets the Host header in the request sent to the backend server.
            # It's essential for the backend to know the original hostname.
            proxy_set_header X-Real-IP $remote_addr;
            # This includes the client's real IP address in the X-Real-IP header, as the request will come from NGINX's IP, not directly from the client.
        }
    }
}

# How it Works in Practice
# 1. A client sends an HTTP request to NGINX.
# 2. NGINX receives the request on port 80.
# 3. NGINX matches the request to the location block "/".
# 4. NGINX forwards the request to one of the backend servers in the "backend" group.
# 5. The backend server processes the request and sends the response back to NGINX.
# 6. NGINX forwards the response back to the client.
